// Sensor
#include<max6675.h> 
#include <SPI.h>
#define MAX6675_SO   8
#define MAX6675_CS   9
#define MAX6675_SCK  10

//Setup LCD
#include <Wire.h> 
#include <LiquidCrystal_I2C.h>
LiquidCrystal_I2C lcd(0x27,20, 4);//Set LCD i2C address and lcd size Address:20x4

#include <SoftwareSerial.h>
SoftwareSerial bt(12,11); // RX, TX



const int temp_down_pin = 2, temp_up_pin = 3, r_timer_pin = 5, s_heating_pin = 6, relay_pin = 7;  // the number of the pushbutton pins

// variables will change:
int btn_temp_down = 0, btn_temp_up = 0; // variable for reading the pushbuttons status
int app_temp_down = 0, app_temp_up = 0; // variable for reading the app button status
int set_temp = 30;
int preStateTemp =0;
int btn_power_heater = 0; // 0 = mati, 1 = hidup
int app_power_heater = 0; // 0 = mati, 1 = hidup
int start_heating = 0;
int realTemperatur = 0; 
double real_temp = 0;
String status_tungku = "";
int incoming_value = 0;
int kenaikan = 10;

// Timer
unsigned long mulai, selesai, dataStopWatch;
int btn_timer_s = 0, btn_timer_reset = 0, app_timer_reset = 0;
int startCountTimer = 0;
int stateAwalTimer = 0; // = 0 -> awal 
int stateStartTimer = 0; // = 0 -> pause, 1 = -> start
int stateStopTimer = 0; 
long lastButton = 0; 
long delayAntiBouncing = 50; 
long dataPause = 0;
float jam = 0;
float menit = 0;
float detik = 0;
float miliDetik = 0;

void setup() {
  Serial.begin(9600);
  bt.begin(9600); 

  //Set Temperature Pin Mode Input
  pinMode(temp_down_pin, INPUT);
  pinMode(temp_up_pin, INPUT);

  //Set Timer Pin Mode Input
  pinMode(r_timer_pin, INPUT);

  //Heater
  pinMode(s_heating_pin, INPUT);
  pinMode(relay_pin, OUTPUT);

  lcd.init();
  lcd.backlight();
  lcd.setCursor(3,0);
  lcd.print("Selamat Datang!"); 
  lcd.setCursor(3,1);
  lcd.print("Tungku Elektrik");
  lcd.setCursor(0,2);
  lcd.print(" Teknik Mesin Unidha");
  lcd.setCursor(1,3);
  lcd.print("By: Agus,Rais,Ridho");
  delay(3500);
  lcd.clear();

  lcd.setCursor(0,0);
  lcd.print("Set Temp  = ");
  
  lcd.setCursor(0,1);
  lcd.print("Real Temp = ");

  lcd.setCursor(0, 2);
  lcd.print("Timer = ");
  
  printLCDTempSet(set_temp);

  status_tungku = "Silahkan Set Temp";
  lcd.setCursor(0, 3);
  lcd.print(status_tungku);
  delay(2000);

}

void loop() {
  if (bt.available()){
    incoming_value = bt.read();
    Serial.println(incoming_value);
    if(incoming_value == 'a'){
      app_temp_down = 1;
      delay(10);
    }
    if(incoming_value == 'b'){
      app_temp_up = 1;
      delay(10);
    }
    if(incoming_value == 'c'){
      app_power_heater = 1;
      delay(10);
    }
    if(incoming_value == 'd'){
      app_timer_reset = 1;
      delay(10);
    }
  }
  
  setTemperatur();
  resetTimer();
  readRealTemperature();
  heater();

  bt.print(set_temp); //send distance to MIT App
  bt.print("|");
  bt.print(int(real_temp)); //send distance to MIT App
  bt.print("|");
  printBtTimer();
  bt.print("|");
  bt.print(status_tungku);
  bt.println("|");

  
}

void tempControl(){
  if(realTemperatur < set_temp){
     digitalWrite(relay_pin, HIGH);
  }else{
     digitalWrite(relay_pin, LOW);
  }

  if(realTemperatur >= set_temp && start_heating == 1){
    stateStopTimer = 1;
    lcd.setCursor(0, 3); 
    status_tungku = "Temperature Holding";
    lcd.print(status_tungku);
    printTimer();
    delay(2000);
  }
}

void heater(){
    btn_power_heater = digitalRead(s_heating_pin);
    printTimer();

    if((btn_power_heater == HIGH || app_power_heater == 1) && start_heating == 0){
      start_heating = 1;
      stateStopTimer = 0;
    }else if((btn_power_heater == HIGH || app_power_heater == 1) && start_heating == 1){
      start_heating = 0;
    }
    app_power_heater = 0;

    if(btn_power_heater == LOW && start_heating == 1){
      if(stateStopTimer == 1){
        stateStartTimer = 0;
      }else{
        stateStartTimer = 1;
        startTimer();
      }
      tempControl();
      if (stateStopTimer != 1){
        lcd.setCursor(0,3);
        status_tungku = "Proses Pemanasan..  ";
        lcd.print(status_tungku);
      }
      
    }else if(btn_power_heater == LOW && start_heating == 0){
      pauseTimer();
      digitalWrite(relay_pin, LOW);
      if (stateStopTimer != 1){
        lcd.setCursor(0,3);
        status_tungku = "Pemanas mati..      ";
        lcd.print(status_tungku);
      }
    }
}


void startTimer(){
   if (stateStartTimer == 1){
      if ((millis() - lastButton) > delayAntiBouncing)
      {
        if (stateAwalTimer == 0 && stateStartTimer == 1)
        {
            mulai = millis();
        }else if (stateAwalTimer == 1 && stateStartTimer == 0){
          dataPause = dataStopWatch;
        }
        stateAwalTimer = 1;
     } 
     lastButton = millis();
     selesai = millis(); 
     unsigned long over;
  
     // MATH time!!!
     dataStopWatch = selesai - mulai;
     dataStopWatch = dataPause + dataStopWatch;
  
     jam = int(dataStopWatch / 3600000);
     over = dataStopWatch % 3600000;
     menit = int(over / 60000);
     over = over % 60000;
     detik = int(over / 1000);
     miliDetik = over % 1000;

     printTimer();
     lcd.setCursor(0, 3); 
     status_tungku = "Start timer... !";
     lcd.print(status_tungku);  
   }
}
void pauseTimer(){
  if(stateStartTimer == 1){
    dataPause = dataStopWatch;
    stateStartTimer = 0; // pause
    stateAwalTimer = 0;
    printTimer();
    lcd.setCursor(0,3);
    status_tungku = "Kondisi Pause  ";
    lcd.print(status_tungku);
    delay(200);
  }
}

void resetTimer(){
  btn_timer_reset = digitalRead(r_timer_pin);
  if (btn_timer_reset == HIGH || app_timer_reset == 1){
      stateStopTimer = 0;
      stateAwalTimer = 0;
      stateStartTimer = 0;
      dataStopWatch = 0;
      dataPause = 0; 
      jam = 0;
      menit = 0;
      detik = 0;
      miliDetik = 00.000;
      lcd.setCursor(0, 3); 
      status_tungku = "Reset Timer        ";
      lcd.print(status_tungku);
      lcd.setCursor(8, 2); 
      lcd.print("0:0:0.0   "); 
      delay(200);
  }
  app_timer_reset = 0;
   
}

void printTimer(){
  lcd.setCursor(8, 2);
  lcd.print(jam, 0); 
  lcd.print(":"); 
  lcd.print(menit, 0);
  lcd.print(":");
  lcd.print(detik, 0);
  lcd.print(".");
  if (jam < 10){
     lcd.print(miliDetik, 0);
     lcd.print("  ");
  }
  
}

void printBtTimer(){
  bt.print(int(jam));
  bt.print(":");
  bt.print(int(menit));
  bt.print(":");
  bt.print(int(detik));
  bt.print(".");
  bt.print(int(miliDetik));
}

// Fungsi Menampilkan Nilai Temperatur Real Sensor
void readRealTemperature(){
  real_temp = readThermocouple(); 
  realTemperatur = real_temp;
  printLCDTempReal(realTemperatur);
  delay(400);
}

// FUngsi Membaca Nilai Temperatur dari Sensor
double readThermocouple() {

  uint16_t v;
  pinMode(MAX6675_CS, OUTPUT);
  pinMode(MAX6675_SO, INPUT);
  pinMode(MAX6675_SCK, OUTPUT);
  
  digitalWrite(MAX6675_CS, LOW);
  delay(1);

  // Read in 16 bits,
  //  15    = 0 always
  //  14..2 = 0.25 degree counts MSB First
  //  2     = 1 if thermocouple is open circuit  
  //  1..0  = uninteresting status
  
  v = shiftIn(MAX6675_SO, MAX6675_SCK, MSBFIRST);
  v <<= 8;
  v |= shiftIn(MAX6675_SO, MAX6675_SCK, MSBFIRST);
  
  digitalWrite(MAX6675_CS, HIGH);
  if (v & 0x4) 
  {    
    // Bit 2 indicates if the thermocouple is disconnected
    return NAN;     
  }

  // The lower three bits (0,1,2) are discarded status bits
  v >>= 3;

  // The remaining bits are the number of 0.25 degree (C) counts
  return v*0.22;
}

void setTemperatur(){
  btn_temp_down = digitalRead(temp_down_pin);
  btn_temp_up = digitalRead(temp_up_pin);
  if ((btn_temp_up == HIGH || app_temp_up == 1) && preStateTemp == 0) {
    if(set_temp < 1000){
      set_temp += kenaikan; 
    }else{
      set_temp = set_temp;
    }
    //Serial.print("Set Temperatur = ");
    //Serial.println(set_temp);
    printLCDTempSet(set_temp);
    delay(200);
    preStateTemp = 1;
    app_temp_up = 0;
  }else if ((btn_temp_down == HIGH || app_temp_down == 1) && preStateTemp == 0) {
    if (set_temp > 30){
      set_temp -= kenaikan;
    }else{
      set_temp = set_temp;
    } 
    //Serial.print("Set Temperatur = ");
    //Serial.println(set_temp);
    printLCDTempSet(set_temp);
    delay(200);
    preStateTemp = 1;
    app_temp_down = 0;
  } else if(btn_temp_down == LOW && btn_temp_up == LOW) {
    preStateTemp = 0;
  }
}

void printLCDTempReal(double real_temp){
  if(real_temp < 100){
    lcd.setCursor(12,1);
    lcd.print("  ");
    lcd.print(real_temp,1);
    lcd.print((char)223);
    lcd.print("C");
  }else if(real_temp >= 100 && real_temp < 1000){
    lcd.setCursor(12,1);
    lcd.print(" ");
    lcd.print(real_temp,1);
    lcd.print((char)223);
    lcd.print("C");
  }else{
    lcd.setCursor(12,1);
    lcd.print(real_temp,1);
    lcd.print((char)223);
    lcd.print("C");
  } 
 
}

void printLCDTempSet(int set_temp){
  if(set_temp < 100){
    lcd.setCursor(12,0);
    lcd.print("  ");
    lcd.print(set_temp);
    lcd.print("  ");
    lcd.print((char)223);
    lcd.print("C");
  }else if(set_temp >= 100 && set_temp < 1000){
    lcd.setCursor(12,0);
    lcd.print(" ");
    lcd.print(set_temp);
    lcd.print("  ");
    lcd.print((char)223);
    lcd.print("C");
  }else{
    lcd.setCursor(12,0);
    lcd.print(set_temp);
    lcd.print("  ");
    lcd.print((char)223);
    lcd.print("C");
  } 
  
}
